{"version":3,"sources":["people-batcher.js"],"names":["PersonUUIDRequestBatcher","extend","namespace","handleHttpSuccess","res","all","body","items","map","personResponse","handleItemSuccess","id","handleItemFailure","email","response","getDeferredForResponse","then","defer","reject","resolve","fingerprintRequest","uuidOrHydraId","hydraId","spark","people","inferPersonIdFromUuid","fingerprintResponse","prepareRequest","ids","join","submitHttpRequest","request","service","resource"],"mappings":";;;;;;;;;;AAIA;;;;AAEA;;;;AAIA,IAAMA,2BAA2B,mBAAQC,MAAR,CAAe;AAC9CC,qBAD8C;;AAG9C;;;;;;AAMAC,mBAT8C,6BAS5BC,GAT4B,EASvB;AAAA;;AACrB,WAAO,kBAAQC,GAAR,CAAYD,IAAIE,IAAJ,CAASC,KAAT,CAAeC,GAAf,CAAmB,UAACC,cAAD;AAAA,aACpC,MAAKC,iBAAL,CAAuBD,eAAeE,EAAtC,EAA0CF,cAA1C,CADoC;AAAA,KAAnB,CAAZ,CAAP;AAGD,GAb6C;AAe9CG,mBAf8C,6BAe5BC,KAf4B,EAerBC,QAfqB,EAeX;AACjC,WAAO,KAAKC,sBAAL,CAA4BF,KAA5B,EACJG,IADI,CACC,UAACC,KAAD,EAAW;AACfA,YAAMC,MAAN,CAAaJ,QAAb;AACD,KAHI,CAAP;AAID,GApB6C;;;AAsB9C;;;;;;;AAOAJ,mBA7B8C,6BA6B5BG,KA7B4B,EA6BrBC,QA7BqB,EA6BX;AACjC,WAAO,KAAKC,sBAAL,CAA4BF,KAA5B,EACJG,IADI,CACC,UAACC,KAAD,EAAW;AACfA,YAAME,OAAN,CAAcL,QAAd;AACD,KAHI,CAAP;AAID,GAlC6C;;;AAoC9C;;;;;;AAMAM,oBA1C8C,8BA0C3BC,aA1C2B,EA0CZ;AAChC,QAAMC,UAAU,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,qBAAlB,CAAwCJ,aAAxC,CAAhB;AACA,WAAO,kBAAQF,OAAR,CAAgBG,OAAhB,CAAP;AACD,GA7C6C;;;AA+C9C;;;;;;AAMAI,qBArD8C,+BAqD1BJ,OArD0B,EAqDjB;AAC3B,WAAO,kBAAQH,OAAR,CAAgBG,OAAhB,CAAP;AACD,GAvD6C;AAyD9CK,gBAzD8C,0BAyD/BC,GAzD+B,EAyD1B;AAClB,WAAO,kBAAQT,OAAR,CAAgBS,IAAIC,IAAJ,EAAhB,CAAP;AACD,GA3D6C;;;AA6D9C;;;;;;AAMAC,mBAnE8C,6BAmE5BF,GAnE4B,EAmEvB;AACrB,WAAO,KAAKL,KAAL,CAAWQ,OAAX,CAAmB;AACxBC,sBADwB;AAExBC,gCAAwBL;AAFA,KAAnB,CAAP;AAID;AAxE6C,CAAf,CAAjC,C,CAVA;;;;kBAqFe5B,wB","file":"people-batcher.js","sourcesContent":["/*!\n * Copyright (c) 2015-2017 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Batcher} from '@ciscospark/spark-core';\n\n/**\n * @class\n * @ignore\n */\nconst PersonUUIDRequestBatcher = Batcher.extend({\n  namespace: `People`,\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {HttpResponseObject} res\n   * @returns {Promise}\n   */\n  handleHttpSuccess(res) {\n    return Promise.all(res.body.items.map((personResponse) =>\n      this.handleItemSuccess(personResponse.id, personResponse)\n    ));\n  },\n\n  handleItemFailure(email, response) {\n    return this.getDeferredForResponse(email)\n      .then((defer) => {\n        defer.reject(response);\n      });\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {string} email\n   * @param {Object} response\n   * @returns {Promise}\n   */\n  handleItemSuccess(email, response) {\n    return this.getDeferredForResponse(email)\n      .then((defer) => {\n        defer.resolve(response);\n      });\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {string} uuidOrHydraId\n   * @returns {Promise<string>}\n   */\n  fingerprintRequest(uuidOrHydraId) {\n    const hydraId = this.spark.people.inferPersonIdFromUuid(uuidOrHydraId);\n    return Promise.resolve(hydraId);\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {string} hydraId\n   * @returns {Promise<string>}\n   */\n  fingerprintResponse(hydraId) {\n    return Promise.resolve(hydraId);\n  },\n\n  prepareRequest(ids) {\n    return Promise.resolve(ids.join());\n  },\n\n  /**\n   * @instance\n   * @memberof PersonUUIDRequestBatcher\n   * @param {Object} ids\n   * @returns {Promise<HttpResponseObject>}\n   */\n  submitHttpRequest(ids) {\n    return this.spark.request({\n      service: `hydra`,\n      resource: `people/?id=${ids}`\n    });\n  }\n});\n\nexport default PersonUUIDRequestBatcher;\n"]}